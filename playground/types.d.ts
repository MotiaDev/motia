/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    'message': MotiaStream<{ message: string; from: 'user' | 'assistant'; status: 'created' | 'pending' | 'completed' }>
    'message_python': MotiaStream<{ message: string }>
  }

  interface Handlers {
    'TestStateCheck': EventHandler<{ key: string; expected?: unknown }, never>
    'TestStateApiTrigger': ApiRouteHandler<{}, unknown, { topic: 'test-state-python'; data: unknown }>
    'Download PDF': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, unknown>, never>
    'Download HTML': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, unknown>, never>
    'stepA': EventHandler<{}, { topic: 'pms.stepA.done'; data: { msg: string; timestamp: number } }>
    'Parallel Merge': ApiRouteHandler<Record<string, unknown>, unknown, { topic: 'pms.start'; data: {} }>
    'join-step': EventHandler<{ msg: string; timestamp: number }, { topic: 'pms.join.complete'; data: { stepA: { msg: string; timestamp: number }; stepB: { msg: string; timestamp: number }; stepC: { msg: string; timestamp: number }; mergedAt: string } }>
    'JoinComplete': EventHandler<{ stepA: { msg: string; timestamp: number }; stepB: { msg: string; timestamp: number }; stepC: { msg: string; timestamp: number }; mergedAt: string }, never>
    'CallOpenAi': EventHandler<{ message: string; assistantMessageId: string; threadId: string }, never>
    'OpenAiApi': ApiRouteHandler<{ message: string }, ApiResponse<200, { message: string; from: 'user' | 'assistant'; status: 'created' | 'pending' | 'completed' }>, { topic: 'openai-prompt'; data: { message: string; assistantMessageId: string; threadId: string } }>
    'MCPEndpoint': ApiRouteHandler<{ jsonrpc: string; id?: unknown; method: string; params?: Record<string, unknown> }, ApiResponse<200, { jsonrpc: string; id: unknown; result?: Record<string, unknown> }> | ApiResponse<202, {}> | ApiResponse<400, { jsonrpc: string; id: unknown; error: { code: number; message: string; data?: unknown } }> | ApiResponse<500, { jsonrpc: string; id: unknown; error: { code: number; message: string; data?: unknown } }>, { topic: 'mcp.tool.call'; data: never }>
    'MCPEndpointGet': ApiRouteHandler<Record<string, unknown>, ApiResponse<405, { detail: string }>, never>
    'MCPInitIntrospection': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, { message: string; initialized: boolean }>, never>
    'MCPTriggerWorkflow': EventHandler<{ toolName: string; arguments: Record<string, unknown>; requestId: unknown }, never>
    'MCPManageState': EventHandler<{ toolName: string; arguments: Record<string, unknown>; requestId: unknown }, never>
    'MCPListSteps': EventHandler<{ toolName: string; arguments: Record<string, unknown>; requestId: unknown }, never>
    'MCPGetLogs': EventHandler<{ toolName: string; arguments: Record<string, unknown>; requestId: unknown }, never>
    'MCPCallApi': EventHandler<{ toolName: string; arguments: Record<string, unknown>; requestId: unknown }, never>
    'PeriodicJobHandled': EventHandler<{ message: string }, { topic: 'tested'; data: never }>
    'HandlePeriodicJob': CronHandler<{ topic: 'periodic-job-handled'; data: { message: string } }>
    'StateAuditJob': CronHandler<{ topic: 'notification'; data: { templateId: string; email: string; templateData: Record<string, unknown> } }>
    'ProcessFoodOrder': EventHandler<{ email: string; quantity: number; petId: number }, { topic: 'notification'; data: { templateId: string; email: string; templateData: Record<string, unknown> } }>
    'Notification': EventHandler<{ templateId: string; email: string; templateData: Record<string, unknown> }, never>
    'ApiTrigger': ApiRouteHandler<{ pet: { name: string; photoUrl: string }; foodOrder?: { id: string; quantity: number } }, ApiResponse<200, { id: number; name: string; photoUrl: string }>, { topic: 'process-food-order'; data: { email: string; quantity: number; petId: number } }>
    'ArrayStep': ApiRouteHandler<Array<{ pet: { name: string; photoUrl: string }; foodOrder?: { id: string; quantity: number } }>, ApiResponse<200, Array<{ id: number; name: string; photoUrl: string }>>, { topic: 'process-food-order'; data: { email: string; quantity: number; petId: number } }>
    'RubyApiStep': ApiRouteHandler<{ rbMessage: string }, ApiResponse<200, { rbResponse: string }>, never>
    'Test State With Python': EventHandler<unknown, { topic: 'test-state-check'; data: { key: string; expected?: unknown } }>
    'Tested Event': EventHandler<never, never>
    'Test Event': EventHandler<never, { topic: 'tested'; data: never }>
    'Test API Endpoint': ApiRouteHandler<Record<string, unknown>, unknown, { topic: 'test'; data: never }>
    'stepC': EventHandler<never, { topic: 'pms.stepC.done'; data: { msg: string; timestamp: number } }>
    'stepB': EventHandler<never, { topic: 'pms.stepB.done'; data: { msg: string; timestamp: number } }>
    'CallOpenAiPython': EventHandler<{ message: string; assistantMessageId: string; threadId: string }, never>
    'OpenAiApiPython': ApiRouteHandler<{ message: string; threadId?: string }, ApiResponse<200, { threadId: string }>, { topic: 'openai-prompt-python'; data: { message: string; assistantMessageId: string; threadId: string } }>
    'PythonStateAuditJob': CronHandler<{ topic: 'python-notification'; data: { template_id: string; email: string; template_data: Record<string, unknown> } }>
    'PythonProcessFoodOrder': EventHandler<{ id: string; email: string; quantity: unknown; pet_id: unknown }, { topic: 'python-notification'; data: { template_id: string; email: string; template_data: Record<string, unknown> } }>
    'PythonNotification': EventHandler<{ template_id: string; email: string; template_data: Record<string, unknown> }, never>
    'PythonApiTrigger': ApiRouteHandler<{ pet: unknown; food_order?: unknown | unknown }, ApiResponse<200, { id: unknown; name: string; photoUrl: string }>, { topic: 'python-process-food-order'; data: { id: string; email: string; quantity: unknown; pet_id: unknown } }>
  }
}