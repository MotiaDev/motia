port: 3000

flows:
  # NOTE: describe your flow here, these descriptions are used for the flow visualizer,
  # don't forget to tag your steps with the appropriate flow name
  booking:
    name: Booking Example
    description: A flow that demonstrates the an event driven booking flow
  handshake:
    name: Endpoint Server Handshake
    description: A flow that demonstrates the handshake between endpoint server and wistro server
  hybrid-example:
    name: Hybrid Endpoint Example
    description: A flow that demonstrates the use of python and nodejs in a flow
  parallel-merge:
    name: Parallel Merge Example
    description: update my description
  wistro-server:
    name: Wistro Server Example
    description: update my description
  openai:
    name: OpenAI Example
    description: A flow that demonstrates the use of OpenAI in a flow
  ecommerce:
    name: Ecommerce Example
    description: A flow that demonstrates the use of ecommerce in a flow

api:
  paths:
    /api/openai:
      method: POST
      emits: call-openai
      name: OpenAI
      description: Triggered when a message is received from chatbot
      flows: [openai]
    /api/hybrid-endpoint-example:
      method: POST
      emits: hybrid.received
      name: Hybrid Endpoint Example
      description: Triggered when a message is received from hybrid endpoint
      flows: [hybrid-example]
    /api/wistro-server-example:
      method: POST
      emits: ws-server-example.trigger
      name: Wistro Server Example
      description: Triggered when a message is received from wistro server
      flows: [wistro-server]
    /api/endpoint-server-handshake:
      method: POST
      emits: handshake.initiate
      name: Endpoint Server Handshake
      description: Triggered when a message is received from endpoint server
      flows: [handshake]
    /api/parallel-merge:
      name: Parallel Merge
      description: Triggered when a message is received from parallel merge
      method: POST
      emits: pms.initialize
      flows: [parallel-merge]
    /api/dbz/initialize:
      name: DBZ Initialize
      description: Triggered when a message is received from dbz
      method: POST
      emits: dbz.initialize
      flows: [booking]
    /api/dbz/search-upgrades:
      name: DBZ Search Upgrades
      description: Triggered when a message is received from dbz
      method: POST
      emits: dbz.evaluate-upgrades
      flows: [booking]
    /api/ecommerce/new-order:
      name: Ecommerce New Order
      description: Triggered when a message is received from ecommerce
      method: POST
      emits: ecommerce.new-order
      flows: [ecommerce]

cron:
  parallel-merge-cron:
    name: Parallel Merge
    description: Triggered every 5 minutes
    cron: '0/5 * * * *'
    emits: pms.initialize
    flows: [parallel-merge]

state:
  adapter: redis
  host: localhost
  port: 6379
