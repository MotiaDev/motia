name: Finalize Release

permissions:
  contents: write
  packages: write

on:
  workflow_run:
    workflows: ['E2E Tests (Release)']
    types:
      - completed

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      tag_name: ${{ steps.extract_version.outputs.tag_name }}
      triggered_by: ${{ steps.extract_version.outputs.triggered_by }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from workflow run
        id: extract_version
        run: |
          # Extract from the triggering workflow's commit
          git fetch --tags

          # Find the tag that points to the head_sha
          TAG_NAME=$(git tag --points-at ${{ github.event.workflow_run.head_sha }} | grep '^v' | head -1)

          if [ -z "$TAG_NAME" ]; then
            echo "❌ No version tag found for commit ${{ github.event.workflow_run.head_sha }}"
            echo "Available tags pointing to this commit:"
            git tag --points-at ${{ github.event.workflow_run.head_sha }} || echo "None"
            exit 1
          fi

          # Extract version from tag (remove 'v' prefix)
          if [[ $TAG_NAME =~ ^v(.+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            echo "❌ Tag $TAG_NAME does not match expected format (v*)"
            exit 1
          fi

          echo "Found tag: $TAG_NAME"
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "triggered_by=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT

  promote-to-latest:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Setup NPM authentication
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc

      - name: Promote packages to latest
        run: |
          npm dist-tag add @motiadev/core@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add @motiadev/workbench@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add @motiadev/stream-client@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add @motiadev/stream-client-browser@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add @motiadev/stream-client-node@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add @motiadev/stream-client-react@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add motia@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add @motiadev/test@${{ needs.prepare.outputs.version }} latest
          npm dist-tag add @motiadev/ui@${{ needs.prepare.outputs.version }} latest

      - name: Remove pre-release tag
        run: |
          npm dist-tag rm @motiadev/core pre-release || true
          npm dist-tag rm @motiadev/workbench pre-release || true
          npm dist-tag rm @motiadev/stream-client pre-release || true
          npm dist-tag rm @motiadev/stream-client-browser pre-release || true
          npm dist-tag rm @motiadev/stream-client-node pre-release || true
          npm dist-tag rm @motiadev/stream-client-react pre-release || true
          npm dist-tag rm motia pre-release || true
          npm dist-tag rm @motiadev/test pre-release || true
          npm dist-tag rm @motiadev/ui pre-release || true

  create-github-release:
    needs: [prepare, promote-to-latest]
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.release_url }}
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.MOTIA_CI_APP_ID }}
          private-key: ${{ secrets.MOTIA_CI_APP_PRIVATE_KEY }}
          permissions: >-
            {
              "contents": "write",
              "packages": "write",
              "metadata": "read"
            }

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0

      - name: Generate enhanced changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ needs.prepare.outputs.tag_name }}^)
          echo "Previous tag: $PREVIOUS_TAG"

          # Create temporary files for categorized changes
          mkdir -p /tmp/changelog
          touch /tmp/changelog/{features,fixes,performance,docs,deps,refactor,tests,build,ci,chores,reverts,other}.md

          # Process commits and categorize them
          git log $PREVIOUS_TAG..${{ needs.prepare.outputs.tag_name }} --pretty=format:"%s|%h|%an" --no-merges | while IFS='|' read -r subject hash author; do
            # Extract conventional commit type
            if [[ $subject =~ ^(feat|feature)(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[3]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/features.md
            elif [[ $subject =~ ^(fix|bugfix)(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[3]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/fixes.md
            elif [[ $subject =~ ^perf(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/performance.md
            elif [[ $subject =~ ^docs(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/docs.md
            elif [[ $subject =~ ^(deps|dependencies)(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[3]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/deps.md
            elif [[ $subject =~ ^refactor(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/refactor.md
            elif [[ $subject =~ ^test(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/tests.md
            elif [[ $subject =~ ^build(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/build.md
            elif [[ $subject =~ ^ci(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/ci.md
            elif [[ $subject =~ ^chore(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/chores.md
            elif [[ $subject =~ ^revert(\(.+\))?!?:(.+) ]]; then
              echo "- ${BASH_REMATCH[2]} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/reverts.md
            else
              echo "- ${subject} ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) by @${author}" >> /tmp/changelog/other.md
            fi
          done

          # Build the changelog
          cat > release_notes.md << 'CHANGELOG_EOF'
          ## 🚀 What's New in Motia ${{ needs.prepare.outputs.version }}

          CHANGELOG_EOF

          # Add each section if it has content
          if [ -s /tmp/changelog/features.md ]; then
            echo -e "\n### ✨ New Features" >> release_notes.md
            cat /tmp/changelog/features.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/fixes.md ]; then
            echo -e "\n### 🐛 Bug Fixes" >> release_notes.md
            cat /tmp/changelog/fixes.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/performance.md ]; then
            echo -e "\n### ⚡ Performance Improvements" >> release_notes.md
            cat /tmp/changelog/performance.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/docs.md ]; then
            echo -e "\n### 📝 Documentation Updates" >> release_notes.md
            cat /tmp/changelog/docs.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/deps.md ]; then
            echo -e "\n### 📦 Dependency Updates" >> release_notes.md
            cat /tmp/changelog/deps.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/refactor.md ]; then
            echo -e "\n### ♻️ Code Refactoring" >> release_notes.md
            cat /tmp/changelog/refactor.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/tests.md ]; then
            echo -e "\n### ✅ Tests" >> release_notes.md
            cat /tmp/changelog/tests.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/build.md ]; then
            echo -e "\n### 🔨 Build System" >> release_notes.md
            cat /tmp/changelog/build.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/ci.md ]; then
            echo -e "\n### 👷 CI/CD Improvements" >> release_notes.md
            cat /tmp/changelog/ci.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/chores.md ]; then
            echo -e "\n### 🧹 Maintenance" >> release_notes.md
            cat /tmp/changelog/chores.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/reverts.md ]; then
            echo -e "\n### ⏪ Reverts" >> release_notes.md
            cat /tmp/changelog/reverts.md >> release_notes.md
          fi

          if [ -s /tmp/changelog/other.md ]; then
            echo -e "\n### 🔧 Other Changes" >> release_notes.md
            cat /tmp/changelog/other.md >> release_notes.md
          fi

          # Add package versions and installation info
          cat >> release_notes.md << 'FOOTER_EOF'

          ## 📦 Package Versions
          - **motia**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/core**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/workbench**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/ui**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/stream-client**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/stream-client-browser**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/stream-client-node**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/stream-client-react**: ${{ needs.prepare.outputs.version }}
          - **@motiadev/test**: ${{ needs.prepare.outputs.version }}

          ## 🚀 Installation & Upgrade

          ### NPM
          ```bash
          npm install motia@${{ needs.prepare.outputs.version }}
          ```

          ### Yarn
          ```bash
          yarn add motia@${{ needs.prepare.outputs.version }}
          ```

          ### PNPM
          ```bash
          pnpm add motia@${{ needs.prepare.outputs.version }}
          ```

          ## 🔗 Links
          - 📖 [Documentation](https://motia.dev)
          - 💬 [Community Discussions](https://github.com/${{ github.repository }}/discussions)
          - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/
          FOOTER_EOF
          
          echo "$PREVIOUS_TAG..${{ needs.prepare.outputs.tag_name }}" >> release_notes.md

          # Clean up
          rm -rf /tmp/changelog

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.prepare.outputs.tag_name }}',
              name: 'Motia ${{ needs.prepare.outputs.version }}',
              body: releaseNotes,
              draft: false,
              prerelease: false
            });

            console.log('Release created:', release.data.html_url);
            core.setOutput('release_url', release.data.html_url);

  send-slack-notification:
    needs: [prepare, create-github-release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Prepare Slack payload
        id: release_info
        env:
          RELEASE_URL: ${{ needs.create-github-release.outputs.release_url }}
        run: |
          cat > slack_payload.json << EOF
          {
            "text": "🚀 New Motia Release: v${{ needs.prepare.outputs.version }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🚀 Motia v${{ needs.prepare.outputs.version }} Released!"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "A new version of Motia has been released! Check out the full release notes for all the details."
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Version:*\nv${{ needs.prepare.outputs.version }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Tag:*\n${{ needs.prepare.outputs.tag_name }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "📦 *Installation:*\n\`npm install motia@${{ needs.prepare.outputs.version }}\`"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Release"
                    },
                    "url": "${RELEASE_URL}",
                    "style": "primary"
                  },
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Documentation"
                    },
                    "url": "https://motia.dev"
                  }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "🤖 Automated release notification from GitHub Actions"
                  }
                ]
              }
            ]
          }
          EOF
          
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            echo "📤 Sending Slack notification..."
            
            response=$(curl -s -w "%{http_code}" -X POST \
              -H 'Content-type: application/json' \
              --data @slack_payload.json \
              "$SLACK_WEBHOOK_URL")
            
            http_code="${response: -3}"
            response_body="${response%???}"
            
            if [ "$http_code" = "200" ]; then
              echo "✅ Slack notification sent successfully!"
            else
              echo "❌ Failed to send Slack notification. HTTP Code: $http_code"
              echo "Response: $response_body"
              exit 1
            fi
          else
            echo "⚠️  SLACK_WEBHOOK_URL secret not found. Skipping Slack notification."
            echo "To enable Slack notifications, add SLACK_WEBHOOK_URL to your repository secrets."
          fi

  commit-version-changes:
    needs: [prepare, create-github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.MOTIA_CI_APP_ID }}
          private-key: ${{ secrets.MOTIA_CI_APP_PRIVATE_KEY }}
          permissions: >-
            {
              "contents": "write",
              "metadata": "read"
            }

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup
        uses: ./.github/actions/setup

      - name: Set version on all packages
        run: |
          pnpm -r --filter "@motiadev/*" exec pnpm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
          pnpm -r --filter motia exec pnpm version ${{ needs.prepare.outputs.version }} --no-git-tag-version

      - name: Commit version changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "chore: release version ${{ needs.prepare.outputs.version }}" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
