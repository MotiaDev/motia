---
description: 
globs: 
alwaysApply: false
---

# Event Steps Guide

Event Steps handle asynchronous events and are the core building blocks of Motia workflows.

## Basic Event Step Pattern
```typescript
import { EventConfig, Handlers } from 'motia'
import { z } from 'zod'

export const config: EventConfig = {
  type: 'event',
  name: 'process-user',
  description: 'Process new user registration',
  subscribes: ['user.created'],
  emits: ['user.processed'],
  input: z.object({
    name: z.string(),
    email: z.string(),
    id: z.string()
  }),
  flows: ['user-management']
}

export const handler: Handlers['process-user'] = async (input, { emit, logger, state }) => {
  const { name, email, id } = input
  
  logger.info('Processing user', { id, name })
  
  // Your business logic here
  const processedUser = {
    ...input,
    status: 'active',
    createdAt: new Date().toISOString()
  }
  
  // Store in state if needed
  await state.set(traceId, 'user', processedUser)
  
  // Emit to next step
  await emit({
    topic: 'user.processed',
    data: processedUser
  })
}
```

## Common Event Patterns

### Sequential Processing
```typescript
export const config: EventConfig = {
  type: 'event',
  name: 'send-welcome-email',
  subscribes: ['user.processed'],
  emits: ['email.sent'],
  input: z.object({
    name: z.string(),
    email: z.string()
  }),
  flows: ['user-management']
}

export const handler: Handlers['send-welcome-email'] = async (input, { emit, logger }) => {
  const { name, email } = input
  
  // Send email logic here
  logger.info('Sending welcome email', { email })
  
  await emit({
    topic: 'email.sent',
    data: { email, type: 'welcome' }
  })
}
```

### Data Transformation
```typescript
export const handler: Handlers['transform-data'] = async (input, { emit }) => {
  // Transform your data
  const transformed = {
    ...input,
    processedAt: new Date().toISOString(),
    status: 'completed'
  }
  
  await emit({
    topic: 'data.transformed',
    data: transformed
  })
}
```

### Error Handling
```typescript
export const handler: Handlers['safe-processor'] = async (input, { emit, logger }) => {
  try {
    // Your processing logic
    const result = await processData(input)
    
    await emit({
      topic: 'processing.success',
      data: result
    })
  } catch (error) {
    logger.error('Processing failed', { error: error.message })
    
    await emit({
      topic: 'processing.failed',
      data: { error: error.message, input }
    })
  }
}
```
