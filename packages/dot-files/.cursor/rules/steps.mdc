 ---
 description: Basic concepts for creating Motia steps
 globs: 
 alwaysApply: false
 ---
# Motia Steps Reference

Steps are the building blocks of Motia workflows. Each step handles specific business logic.

## Step Types
- **API Steps**: HTTP endpoints that trigger workflows
- **Event Steps**: Process events and emit new ones
- **Cron Steps**: Run on schedules
- **NOOP Steps**: Testing and workflow connections
- **UI Steps**: Custom visual components

## Basic Step Structure
Every step needs:
1. **config**: Defines step properties
2. **handler**: Contains your business logic

```typescript
// config defines what the step does
export const config = {
  type: 'event',
  name: 'my-step',
  subscribes: ['input-topic'],
  emits: ['output-topic'],
  flows: ['my-flow']
}

// handler contains your logic
export const handler = async (input, context) => {
  // Your code here
  await context.emit({
    topic: 'output-topic',
    data: { result: 'processed' }
  })
}
```

## Step Naming
- Use descriptive names: `process-payment`, `send-notification`
- Use kebab-case: `my-step.step.ts`
- Include `.step` in filename: `process-user.step.ts`

## Context Object
Every handler receives a context with:
```typescript
const { emit, logger, state, traceId } = context

// Emit events to other steps
await emit({ topic: 'next-step', data: result })

// Log information
logger.info('Processing started', { userId })

// Store/retrieve data
await state.set('key', value)
const data = await state.get('key')
```

## Best Practices
1. Keep steps focused on one task
2. Use meaningful topic names
3. Always handle errors gracefully
4. Log important operations
5. Validate input data with Zod schemas

## Quick Start Template
```typescript
import { EventConfig, Handlers } from 'motia'
import { z } from 'zod'

export const config: EventConfig = {
  type: 'event',
  name: 'my-new-step',
  subscribes: ['trigger-topic'],
  emits: ['result-topic'],
  input: z.object({
    message: z.string()
  }),
  flows: ['my-flow']
}

export const handler: Handlers['my-new-step'] = async (input, { emit, logger }) => {
  logger.info('Step started', { input })
  
  // Your logic here
  const result = `Processed: ${input.message}`
  
  await emit({
    topic: 'result-topic',
    data: { result }
  })
}
```

