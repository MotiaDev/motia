---
description: Basic Motia workflow patterns and project structure
globs: 
alwaysApply: true
---
---
description: Basic Motia workflow patterns and project structure
globs: 
alwaysApply: true
---
# Motia Framework Basics

Motia helps you build event-driven workflows using simple steps that communicate through topics.

## Core Concepts

**Steps**: Building blocks that contain your business logic
- API Steps: HTTP endpoints
- Event Steps: Process events
- Cron Steps: Scheduled tasks
- NOOP Steps: Workflow connections

**Topics**: Named channels for communication between steps
**Flows**: Groups of related steps that work together

## Basic Workflow Pattern
```
API Step → Event Step → Event Step → Final Step
    ↓         ↓           ↓          ↓
  [topic1] [topic2]   [topic3]   [done]
```

## Project Structure
```
my-motia-project/
├── steps/
│   ├── 01-api-trigger.step.ts     # API endpoint
│   ├── 02-process-data.step.ts    # Business logic
│   └── 03-send-result.step.ts     # Final action
├── package.json
└── tsconfig.json
```

## Step Creation Guidelines

### 1. Start with API Step
```typescript
// 01-api-trigger.step.ts
export const config: ApiRouteConfig = {
  type: 'api',
  name: 'start-workflow',
  path: '/start',
  method: 'POST',
  emits: ['workflow.started'],
  flows: ['main-flow']
}
```

### 2. Add Event Steps for Logic
```typescript
// 02-process-data.step.ts
export const config: EventConfig = {
  type: 'event',
  name: 'process-data',
  subscribes: ['workflow.started'],
  emits: ['data.processed'],
  flows: ['main-flow']
}
```

### 3. Connect Steps with Topics
- Each step subscribes to topics from previous steps
- Each step emits topics for next steps
- Use descriptive topic names: `user.created`, `email.sent`

## Best Practices
- Keep steps small and focused
- Use clear, descriptive names
- Always include steps in a flow
- Start workflows with API steps
- Put heavy logic in Event steps (background processing)
- Use consistent topic naming: `entity.action`

## Quick Development Workflow
1. Create API step to trigger workflow
2. Add Event steps for business logic
3. Connect steps with topics
4. Test with `curl` or Workbench
5. View workflow in browser at `http://localhost:3000`

## Testing Your Workflow
```bash
# Start development server
pnpm run dev

# Trigger API endpoint
curl -X POST http://localhost:3000/start -d '{}'

# Or emit event directly
npx motia emit --topic workflow.started --message '{}'
```
