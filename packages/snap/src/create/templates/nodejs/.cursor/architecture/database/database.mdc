---
description: Database connections and queries
globs: src/repositories/**/*.ts
alwaysApply: false
---
# Database Guide

- Prefer knex to interact with the database
  - http://npmjs.com/package/knex
- Use knex migrations to manage database schema changes
- Do NOT create DB calls directly in steps or services, ALWAYS create a repository file to handle the database calls. Follow DDD principles.

## Add commands to package.json

```json
{
  "scripts": {
    "migrate:up": "knex migrate:latest",
    "migrate:down": "knex migrate:rollback",
  }
}
```

## Creating base database connection

- When SQL database is used, create a database connection file in the `src/repositories/database.ts` file.
- All columns in code are cammelCase, however, in the database and in the migration, we use snake_case.
- Avoid numeric incremental IDs, use UUIDs instead. Make sure to add foreign key with cascade delete when applicable.

```typescript
import knex, { Knex } from 'knex'
/**
 * Create these functions to convert between camelCase and snake_case.
 * This is important to keep the consistency of the data.
 */
import { camelToSnake, snakeToCamelObject } from '../utils/case-conversion'

const isProduction = process.env.NODE_ENV === 'production'
const isDevelopment = process.env.NODE_ENV === 'development'

// Knex configuration
const knexConfig: Knex.Config = {
  client: 'pg',
  connection: {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    ssl: process.env.DB_SSL ? {
      /** In development, we might use self-signed certs */
      rejectUnauthorized: isProduction, 
      /** Add CA certificate if needed */
      ca: undefined, 
    } : false,
  },
  pool: {
    min: 2,
    max: 10,
    idleTimeoutMillis: 30000,
  },
  debug: isDevelopment,
  wrapIdentifier: (value, origImpl) => origImpl(camelToSnake(value)),
  postProcessResponse: result => 
    Array.isArray(result) 
      ? result.map(row => snakeToCamelObject(row)) 
      : snakeToCamelObject(result),
}

// Create a singleton instance
let db: Knex | null = null

/**
 * Get the database instance
 * @returns Knex instance
 */
export const getDb = (): Knex => {
  if (!db) {
    db = knex(knexConfig)
  }
  return db
}
```